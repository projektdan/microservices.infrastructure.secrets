Source:
https://www.bogotobogo.com/DevOps/Docker/Docker-Vault-Consul.php
https://www.bogotobogo.com/DevOps/Docker/Docker-Vault-Consul-B.php
https://www.bogotobogo.com/DevOps/Docker/Docker-Vault-Consul-C.php


docker-compose up -d --build

VAULT (with filesystem backend no scaleable)
Initializing and Unsealing
	docker-compose exec vault bash
Initialize Vault
	vault operator init

	Unseal Key 1 - 5:

	Initial Root Token: ...

Vault initialized with 5 key shares and a key threshold of 3. Please securely
distribute the key shares printed above. When the Vault is re-sealed,
restarted, or stopped, you must supply at least 3 of these keys to unseal it
before it can start servicing requests.

Vault does not store the generated master key. Without at least 3 key to
reconstruct the master key, Vault will remain permanently sealed!

It is possible to generate new unseal keys, provided you have a quorum of
existing unseal keys shares. See "vault operator rekey" for more information.

Now we can unseal Vault using three of the keys:
	vault operator unseal unseal_key_1
	vault operator unseal unseal_key_2
	vault operator unseal unseal_key_3

Let's authenticate using the root token:
	vault login root_token

Auditing
Detailed log
	vault audit enable file file_path=/vault/logs/audit.log
View all enabled audit devices
	vault audit list
Docker logs
	docker logs container_vault_name

SECRETS

Enable new secrets engine with path
	vault secrets enable -path=kv kv
	
Enable versioning
	vault kv enable-versioning secret/

STATIC SECRET

Create
	vault kv put secret/foo bar=precious
Read
	vault kv get secret/foo
Update
	vault kv put secret/foo bar=copper
Read specific version
	vault kv get -version=1 secret/foo

API
Root token as environment variable
	export VAULT_TOKEN=token
	export VAULT_ADDR=token

create a new secret
curl \
     -H "X-Vault-Token: $VAULT_TOKEN" \
     -H "Content-Type: application/json" \
     -X POST \
     -d '{ "data": { "foo": "world" } }' \
     http://127.0.0.1:8200/v1/secret/data/hello

read the secret
curl \
     -H "X-Vault-Token: $VAULT_TOKEN" \
     -X GET \
     http://127.0.0.1:8200/v1/secret/data/hello


POLICIES
Root policy to interact with the API
Policy with only read access
{
  "path": {
    "secret/data/app/*": {
      "policy": "read"
    }
  }
}

After add new policy we have to generate new token
vault token create -policy=app

Using this policy with token we have only read access to path: secret/data/app/*

TRANSIT SECRETS
Transient can be used as an Encryption as a Service.
	Encrypting and decrypting data "in-transit" without storing it inside Vault.
	Easily integrating encryption into our application workflow.

ENABLE ENGINE
	vault secrets enable transit

Encrypt
	vault write transit/encrypt/foo plaintext=$(base64 <<< "my value")

Decrypt
	vault write transit/decrypt/foo ciphertext=vault:v1:ktjSd/AejJBwrAauKqmUzhM0ue/v/WD/RpRqYZlXgYxDA70RyQ==

Decode
	base64 -d <<< "bXkgdmFsdWUK"


DYNAMIC SECRETS
	As we already know, Vault supports a number of dynamic secret backends for generating secrets dynamically when needed.
	For example, with the AWS and Google Cloud backends, we can create access credentials based on IAM policies.
	The Databases backend, meanwhile, generates database credentials based on configured roles.
	Dynamic Secrets are generated on demand. They have limited access based on role,
	and they are leased for a period of time. They can be revoked and come with an audit trail.

HASHICORP VAULT AND HASHICORP CONSUL
	We can use consul backend for distributed systems.
Consul has multiply components such as discovering and configuring services in our infrastructure.
Key features:
	Service Discovery
	Health Checking
	KV Store
	Multi Datacenter
Consul as KV Storage backend

Consul configuration
https://www.consul.io/docs/agent/options


RESET VAULT-CONSUL configuration

- docker-compose down
- Remove from consul vault key/value
- docker-compose exec consul bash
  consul kv delete -recurse vault/
- docker container stop consul and vault
- docker container start consul and vault

ACCESS IN VAULT

#list the current auth methods
vault auth list

#Enable Userpass auth method
vault auth enable userpass

#Help
vault path-help auth/userpass

#Add new user
vault write auth/userpass/users/daniel password=password

#Users list
vault list auth/userpass/users

vault login -method=userpass username=daniel

curl --header "X-Vault-Token: $VAULT_TOKEN" --request POST \
	--data '{"username": "daniel", "password": "password"}' $VAULT_ADDR/v1/auth/userpass/login/daniel

# JSON format return
curl --header "X-Vault-Token: $VAULT_TOKEN" --request POST \
	--data '{"username": "daniel", "password": "password"}' $VAULT_ADDR/v1/auth/userpass/login/daniel | AejJBwrAauKqmUzhM0ue

#Remove account
vault delete auth/userpass/users/daniel

#Create a new secrets engine kv path for devs
vault secrets enable -path=devkv kv
vault kv put devkv/alldevs answer=42

#Create a new policy for dev
vault policy write dev devpol.hcl